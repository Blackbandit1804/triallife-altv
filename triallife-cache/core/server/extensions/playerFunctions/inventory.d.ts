import * as alt from 'alt-server';
import { EquipmentType } from '../../../shared/utility/enums';
import { Item, ItemSpecial } from '../../../shared/interfaces/Item';
import { CategoryData } from '../../interface/category';
declare function getFreeInventorySlot(p: alt.Player, tabNumber?: number): {
    tab: number;
    slot: number;
} | null;
declare function hasItem(player: alt.Player, item: Partial<Item>): boolean;
declare function hasWeapon(player: alt.Player): Item | null;
declare function getInventoryItem(p: alt.Player, slot: number, tab: number): Item | null;
declare function replaceInventoryItem(p: alt.Player, item: Item, tab: number): boolean;
declare function getEquipmentItem(p: alt.Player, slot: number): Item | null;
declare function getToolbarItem(p: alt.Player, slot: number): Item | null;
declare function isInInventory(p: alt.Player, item: Partial<Item>): {
    tab: number;
    index: number;
} | null;
declare function isInEquipment(p: alt.Player, item: Partial<Item>): {
    index: number;
} | null;
declare function isEquipmentSlotFree(p: alt.Player, slot: EquipmentType): boolean;
declare function isInventorySlotFree(p: alt.Player, slot: number, tab: number): boolean;
declare function inventoryAdd(p: alt.Player, item: Item, slot: number, tab: number): boolean;
declare function inventoryRemove(p: alt.Player, slot: number, tab: number): boolean;
declare function equipmentRemove(p: alt.Player, slot: EquipmentType): boolean;
declare function isEquipmentSlotValid(item: Item, slot: EquipmentType): boolean;
declare function equipmentAdd(p: alt.Player, item: Item, slot: EquipmentType): boolean;
declare function isToolbarSlotFree(p: alt.Player, slot: number): boolean;
declare function toolbarAdd(p: alt.Player, item: Item, slot: number): boolean;
declare function toolbarRemove(p: alt.Player, slot: number): boolean;
declare function replaceToolbarItem(p: alt.Player, item: Item): boolean;
declare function isInToolbar(p: alt.Player, item: Partial<Item>): {
    index: number;
} | null;
declare function findAndRemove(player: alt.Player, itemName: string): boolean;
declare function getSlotType(slot: string): string;
declare function handleSwapOrStack(player: alt.Player, selectedSlot: string, endSlot: string, tab: number | null, customItemRules: Array<Function>): void;
declare function allItemRulesValid(player: alt.Player, item: Item, endSlot: CategoryData, endSlotIndex: number | null, customItemRules: Array<Function>, tab: number | null): boolean;
declare function getAllItems(player: alt.Player): Array<ItemSpecial>;
declare function stackInventoryItem(player: alt.Player, item: Item): boolean;
declare function getAllWeapons(player: alt.Player): Array<Item>;
declare function removeAllWeapons(player: alt.Player): Array<Item>;
declare const _default: {
    allItemRulesValid: typeof allItemRulesValid;
    equipmentAdd: typeof equipmentAdd;
    equipmentRemove: typeof equipmentRemove;
    findAndRemove: typeof findAndRemove;
    getAllItems: typeof getAllItems;
    getAllWeapons: typeof getAllWeapons;
    getEquipmentItem: typeof getEquipmentItem;
    getFreeInventorySlot: typeof getFreeInventorySlot;
    getInventoryItem: typeof getInventoryItem;
    getSlotType: typeof getSlotType;
    getToolbarItem: typeof getToolbarItem;
    handleSwapOrStack: typeof handleSwapOrStack;
    hasItem: typeof hasItem;
    hasWeapon: typeof hasWeapon;
    inventoryAdd: typeof inventoryAdd;
    inventoryRemove: typeof inventoryRemove;
    isEquipmentSlotValid: typeof isEquipmentSlotValid;
    isEquipmentSlotFree: typeof isEquipmentSlotFree;
    isInEquipment: typeof isInEquipment;
    isInInventory: typeof isInInventory;
    isInToolbar: typeof isInToolbar;
    isInventorySlotFree: typeof isInventorySlotFree;
    isToolbarSlotFree: typeof isToolbarSlotFree;
    removeAllWeapons: typeof removeAllWeapons;
    replaceInventoryItem: typeof replaceInventoryItem;
    replaceToolbarItem: typeof replaceToolbarItem;
    stackInventoryItem: typeof stackInventoryItem;
    toolbarAdd: typeof toolbarAdd;
    toolbarRemove: typeof toolbarRemove;
};
export default _default;
